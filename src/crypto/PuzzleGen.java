/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package crypto;

import java.io.IOException;
import java.io.PrintWriter;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Base64;
import java.util.Random;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;

/**
 * @author carlosarli
 * @author edharper
 * @created 14/03/16
 */
public class PuzzleGen {
    
    
    public final int MAX_PUZZLES = 1024;
    
    static Cipher cipher;

    public CryptoLib cl;
    
    public ArrayList<Puzzle> puzzles;

    public ArrayList<byte[]> ePuzzles;
    
    /**
     * constructor for the puzzleGen class
     */
    public PuzzleGen(){
        this.puzzles = new ArrayList();
        this.ePuzzles = new ArrayList();
    }
    
    /**
     * Generates Unique byte array for each puzzle
     * @param i - the integer id
     * @return - unique byte array
     */
    public byte[] genPId(int i){
        byte[] id = cl.smallIntToByteArray(i);
        return id;
    }
    
    /**
     * Generates puzzle 64 bit DES key
     * @return DES KEY
     * @throws NoSuchAlgorithmException 
     */
    public SecretKey genDesKey () throws NoSuchAlgorithmException {
        KeyGenerator kg = KeyGenerator.getInstance("DES");
        kg.init(56);
        SecretKey des = kg.generateKey();
        return des;
    }
    
    /**
     * ALICE
     * Generates puzzles
     * @throws java.security.NoSuchAlgorithmException
     */
    public void generate() throws NoSuchAlgorithmException{
        
        for(int i=0; i < MAX_PUZZLES; i++){
            
            // Get puzzle unique id
            byte[] id = genPId(i);
            
            // Get puzzle DES Key
            byte[] desKey = genDesKey().getEncoded();
            
            // Create puzzle
            Puzzle p = new Puzzle(i, id, desKey);
            
            // Store to array
            puzzles.add(p);
        }
        saveUnEncryptedPuzzles();
        for(Puzzle p : puzzles){
            System.out.println("Puzzles : " + p.toString());
        }
    }
    
        /**
         * ALICE
         * Saves unencrypted puzzles for lookup
         */
       public void saveUnEncryptedPuzzles(){
        try{
            //Init Print Writer.
            PrintWriter writer = new PrintWriter("unEncryptedPuzzles.txt", "UTF-8");
            byte[] currentPuzzle = new byte[26];
            for(int i=0; i<puzzles.size(); i++){
                // Get current encrypted puzzle byte array
                currentPuzzle = puzzles.get(i).getPuzzleBytes();
                
                // Convert encrypted puzzle to string
                String puzzleString = cl.byteArrayToString(currentPuzzle);
                
                // Write string to file
                writer.println(puzzleString);
            }
 
            writer.close();
        }catch(IOException e){
            e.printStackTrace();
        }
    }
    
    /**
     * Generates DES key bytes with 2 randomly generated bytes and 4 bytes of zeros.
     * @return DES key byte array
     */
    public byte[] genEncryptionKeyBytes(){
        Random rand = new Random();
        int rn = rand.nextInt(65536) + 0;
        
        // Gen leading bytes
        byte[] leadingBytes = cl.smallIntToByteArray(rn);
        // Create 48 0's
        byte[] endingZeros = new byte[4];
        // Target byte array
        byte[] desBytes = new byte[8];
        
        // Append leadingBytes and endingZeros to give 8 byte array
        System.arraycopy(leadingBytes, 0, desBytes, 0, leadingBytes.length);
        System.arraycopy(endingZeros, 0, desBytes, leadingBytes.length, endingZeros.length);
        
        // Bytes for DES KEY DEBUG
        //System.out.println("Bytes array for DES KEY:  " + Arrays.toString(desBytes));
        return desBytes;
    }
    
    /**
     * Encrypts Puzzles using DES key. @see genEncryptionKeyBytes
     * @throws java.security.spec.InvalidKeySpecException
     * @throws java.security.NoSuchAlgorithmException
     * @throws java.security.InvalidKeyException
     * @throws javax.crypto.IllegalBlockSizeException
     * @throws javax.crypto.NoSuchPaddingException
     * @throws javax.crypto.BadPaddingException
     */
    public void puzzleEnrypt() throws InvalidKeySpecException, NoSuchAlgorithmException, InvalidKeyException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException{
        cipher = Cipher.getInstance("DES");
        for(int i=0; i<puzzles.size(); i++){
            byte[] pb = puzzles.get(i).getPuzzleBytes();
            
            byte[] desBytes = genEncryptionKeyBytes();
            // Create DES encryption key using new array
            SecretKey encryptionKey = cl.createKey(desBytes);
            
            //Print Key DEBUG //
            /*
            String encodedKey = Base64.getEncoder().encodeToString(encryptionKey.getEncoded());
            System.out.println("Encrytion Key:  " + encodedKey);
            */
            // Init cipher in encrypt mode
            cipher.init(Cipher.ENCRYPT_MODE, encryptionKey);
            
            // Encrypt puzzles
            byte[] encryptedPuzzle = cipher.doFinal(pb);
            
            //Store in encrytped puzzle arraylist
            ePuzzles.add(encryptedPuzzle);
        }
        /*
        for(byte[] b : ePuzzles){
            System.out.println(Arrays.toString(b));
        }*/
        
    }
    
    /**
     * Stores encrypted puzzles to file
     * !! WARNING - OVERWRITES FILE EVERY TIME !!
     */
    public void puzzleStorage(){
        try{
            //Init Print Writer.
            PrintWriter writer = new PrintWriter("puzzles.txt", "UTF-8");
            
            for(int i=0; i<ePuzzles.size(); i++){
                // Get current encrypted puzzle byte array
                byte[] currentPuzzle = ePuzzles.get(i);
                
                // Convert encrypted puzzle to string
                String puzzleString = cl.byteArrayToString(currentPuzzle);
                
                // Write string to file
                writer.println(puzzleString);
            }
            writer.close();
        }catch(IOException e){
            e.printStackTrace();
        }
    }
}
